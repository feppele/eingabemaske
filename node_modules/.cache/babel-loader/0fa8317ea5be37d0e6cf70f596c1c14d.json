{"ast":null,"code":"var _jsxFileName = \"/Users/fritz/Desktop/IPFS_upload/src/pages/MainPage.js\",\n    _s = $RefreshSig$();\n\nimport classes from './MainPage.module.css';\nimport React, { useState, useEffect, useHistory } from 'react';\nimport { Button, Input, ListItemButton, ListItemText, List } from '@mui/material';\nimport { create } from 'ipfs-http-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MainPage(props) {\n  _s();\n\n  const [url, setUrl] = useState(\"\");\n  const [uploads, setUploads] = useState([]); //document.cookie = \"username2=chrome\";\n\n  function getCookies() {\n    var cookies = document.cookie.split(';').reduce((cookies, cookie) => {\n      const [name, val] = cookie.split('=').map(c => c.trim());\n      cookies[name] = val;\n      return cookies;\n    }, {});\n    return cookies;\n  }\n\n  function addUploads(newUpload) {\n    var uploads = getCookies().uploads || [];\n    if (newUpload === undefined || newUpload === \"\") return;\n    uploads = uploads + \"|\" + newUpload;\n    document.cookie = `uploads=${uploads}`;\n  }\n\n  function getUploads() {\n    var uploads = getCookies().uploads || \"\";\n    return uploads.split(\"|\");\n  }\n\n  useEffect(() => {\n    setUploads(getUploads());\n  }, []);\n  console.log(uploads);\n  const hiddenFileInput = React.useRef(null);\n\n  function clickOnHiddenInput(event) {\n    hiddenFileInput.current.click(event);\n  }\n\n  async function uploadToIpfs(event) {\n    const uploadFile = event.target.files[0];\n\n    try {\n      const client = create('https://ipfs.infura.io:5001/api/v0');\n      const added = await client.add(event.target.files[0]);\n      setUrl(`https://ipfs.infura.io/ipfs/${added.path}`);\n    } catch (error) {\n      console.log('Error uploading file: ', error);\n    } // to Cookie\n\n\n    addUploads(url); // to State\n\n    setUploads(url);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.uploadBox,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: hiddenFileInput,\n        id: \"imageInput\",\n        type: \"file\",\n        name: \"file\",\n        onChange: uploadToIpfs,\n        hidden: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: clickOnHiddenInput,\n        variant: \"contained\",\n        children: \"Choose file & upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.succsesfull,\n      children: url\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.allUploads,\n      children: /*#__PURE__*/_jsxDEV(List, {\n        children: uploads.map(ele => /*#__PURE__*/_jsxDEV(ListItemButton, {\n          component: \"a\",\n          href: \"#simple-list\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: ele\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 87\n          }, this), \"  \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 36\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MainPage, \"RDO4CnqehEfIcE8IfaiEynh4JWg=\");\n\n_c = MainPage;\nexport default MainPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["classes","React","useState","useEffect","useHistory","Button","Input","ListItemButton","ListItemText","List","create","MainPage","props","url","setUrl","uploads","setUploads","getCookies","cookies","document","cookie","split","reduce","name","val","map","c","trim","addUploads","newUpload","undefined","getUploads","console","log","hiddenFileInput","useRef","clickOnHiddenInput","event","current","click","uploadToIpfs","uploadFile","target","files","client","added","add","path","error","container","uploadBox","succsesfull","allUploads","ele"],"sources":["/Users/fritz/Desktop/IPFS_upload/src/pages/MainPage.js"],"sourcesContent":["import classes from './MainPage.module.css';\nimport React, {useState,useEffect,useHistory} from 'react';\nimport {Button,Input,ListItemButton,ListItemText,List} from '@mui/material';\n\nimport { create } from 'ipfs-http-client'\n\nfunction MainPage(props){\n\n\n\n    const [url,setUrl] = useState(\"\")\n    const [uploads,setUploads] = useState([])\n\n    //document.cookie = \"username2=chrome\";\n\n    function getCookies() {\n        var cookies = document.cookie.split(';').reduce(\n            (cookies, cookie) => {\n                const [name, val] = cookie.split('=').map(c => c.trim());\n                cookies[name] = val;\n                return cookies;\n            }, {});\n        return cookies;\n    }\n\n    function addUploads(newUpload){\n        var uploads =getCookies().uploads || []\n\n        if(newUpload === undefined ||newUpload === \"\") return\n        uploads = uploads + \"|\" + newUpload\n\n        document.cookie = `uploads=${uploads}`\n\n    }\n\n    function getUploads(){\n        var uploads =getCookies().uploads || \"\"\n        return uploads.split(\"|\")\n    }\n\n\n\n\n    useEffect(()=>{\n        setUploads(getUploads())\n\n    },[])\n\n    console.log(uploads)\n\n    const hiddenFileInput = React.useRef(null);\n    function clickOnHiddenInput(event){\n        hiddenFileInput.current.click(event);\n    }\n\n    async function uploadToIpfs(event){\n\n        const uploadFile= event.target.files[0]\n\n        try {\n            const client = create('https://ipfs.infura.io:5001/api/v0')\n            const added = await client.add(event.target.files[0])\n            setUrl(`https://ipfs.infura.io/ipfs/${added.path}`)\n\n        } catch (error) {\n            console.log('Error uploading file: ', error)\n        }\n\n        // to Cookie\n        addUploads(url)\n        // to State\n        setUploads(url)\n    }\n\n\n    return (\n        <div className={classes.container}>\n\n            <div className={classes.uploadBox}>\n                <input ref={hiddenFileInput} id =\"imageInput\" type=\"file\" name=\"file\" onChange={uploadToIpfs} hidden />\n                <Button onClick={clickOnHiddenInput} variant=\"contained\">{\"Choose file & upload\"}</Button>\n            </div>\n\n            <div className={classes.succsesfull}>\n\n                {url}\n\n            </div>\n\n            <div className={classes.allUploads}>\n\n            <List>\n\n                {uploads.map(ele=> <ListItemButton component=\"a\" href=\"#simple-list\"> <ListItemText primary={ele} />  </ListItemButton>\n\n                )}\n\n\n            </List>\n            </div>\n\n\n\n        </div>\n    );\n}\n\nexport default MainPage;"],"mappings":"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"},"metadata":{},"sourceType":"module"}